generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PENDING
}

enum PaymentStatus {
  PENDING
  APPROVED
  REJECTED
  REFUNDED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  PIX
  BOLETO
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  name          String
  role          UserRole       @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  subscriptions Subscription[]
  payments      Payment[]
  activityLogs  ActivityLog[]

  @@map("users")
}

model Plan {
  id            String         @id @default(uuid())
  name          String
  description   String?
  price         Decimal        @db.Decimal(10, 2)
  durationDays  Int
  features      String[]
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  subscriptions Subscription[]

  @@map("plans")
}

model Subscription {
  id            String              @id @default(uuid())
  userId        String
  planId        String
  status        SubscriptionStatus  @default(PENDING)
  startDate     DateTime            @default(now())
  endDate       DateTime
  cancelledAt   DateTime?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan          Plan                @relation(fields: [planId], references: [id])
  payments      Payment[]

  @@map("subscriptions")
}

model Payment {
  id                String          @id @default(uuid())
  userId            String
  subscriptionId    String
  amount            Decimal         @db.Decimal(10, 2)
  status            PaymentStatus   @default(PENDING)
  method            PaymentMethod
  externalId        String?
  externalData      Json?
  paidAt            DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription      Subscription    @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model ActivityLog {
  id          String   @id @default(uuid())
  userId      String
  action      String
  resource    String
  resourceId  String?
  details     Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activity_logs")
}

